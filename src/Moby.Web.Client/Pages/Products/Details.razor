@page "/Products/Details"
@using Moby.Web.Shared.Models.Cart
@using Moby.Web.Shared
@using Moby.Web.Shared.Models.Cart.Post


@inject IProductService ProductService
@inject ITokenService TokenService
@inject IShoppingCartService ShoppingCartService
@inject AuthenticationStateProvider AuthenticationState
@inject NavigationManager NavigationManager

<section class="row"> 
    <div class="col-lg-6 col-md-12">
        <h3>@_product.Name</h3>
        <p>@((MarkupString)_product.Description))</p>

        <EditForm Model="Cart" OnValidSubmit="BeginAddToCartFlow">
            <InputNumber class="form-control form-control-lg" 
                         @bind-Value="Cart.Count" />

            <div class="my-3">
                <button class="btn btn-primary">Add to cart</button>
            </div>
        </EditForm>
        
        
    </div>
    
    <div class="col-lg-6 col-md-12">
        <img class="img-fluid rounded-3" src="@_product.ImageUrl" />
    </div>
</section>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "productid")]
    public int ProductId { get; set; }

    private ProductDto _product = new();

    private CartDetails Cart = new();

    protected override async Task OnInitializedAsync()
    {
        _product = await ProductService.GetProductByIdAsync(ProductId, "");
    }

    private async Task BeginAddToCartFlow()
    {
        var cart = new PostCartDto
        {
            CartHeader = new()
            {
                UserId = AuthenticationState.GetAuthenticationStateAsync()
                    .Result.User.Claims.FirstOrDefault(u => u.Type == "sub")!.Value
            }
        };

        var productToAddResponse = await ProductService.GetProductByIdAsync(ProductId, "");

        var cartDetails = new PostCartDetailsDto
        {
            ProductId = ProductId,
            Count = Cart.Count
        };

        var productToAdd = new ProductDto();

        if (productToAddResponse is not null)
        {
            productToAdd = productToAddResponse;
        }

        cartDetails.Product = productToAdd;

        List<PostCartDetailsDto> cartDetailsDto = new();

        cartDetailsDto.Add(cartDetails);

        cart.CartDetails = cartDetailsDto;

        var shoppingCartAccessToken = await TokenService.GetTokenAsync(ApiRoutes.Carts);

        var shoppingCartResponse = await ShoppingCartService.CreateCartAsync(cart, shoppingCartAccessToken.AccessToken);

        if (shoppingCartResponse)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    class CartDetails
    {
        public int Count { get; set; } = 1;
    }
}
