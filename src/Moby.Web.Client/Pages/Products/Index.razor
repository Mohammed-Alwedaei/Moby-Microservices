@page "/Products"

@inject IProductService ProductService

<PageTitle>Our Products</PageTitle>

<section class="row align-items-center">
    <div class="col-lg-6 col-12">
        <h1>Products</h1>

        <p>This component demonstrates fetching data from the server.</p>
    </div>
    
    <div class="col-lg-6 col-12 text-end">
        <button class="btn btn-info">
            Create Product &nbsp; <i class="oi oi-plus"></i>
        </button>
    </div>
</section>

@if (!Products.Any())
{
    <div class="spinner-border"></div>
}
else
{
    <table class="table table-borderless table-striped shadow-lg rounded-3 overflow-hidden">
        <thead class="table-dark">
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Category</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var product in Products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description.Substring(0, 30)</td>
                    <td>@product.Category</td>
                    <td>@product.Price.ToString("c")</td>
                    <td>
                        <a class="btn btn-sm btn-secondary" href="/Products/Update?productId=@product.Id">Update</a>
                        <a class="btn btn-sm btn-danger" href="/Products/Delete?productId=@product.Id">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<ProductDto> Products = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await ProductService.GetProductsAsync<ResponseDto>();

        if (response.Results is not null || response.IsSuccess is not false)
            Products = JsonConvert.DeserializeObject<List<ProductDto>>(Convert.ToString(response.Results));
    }
}
