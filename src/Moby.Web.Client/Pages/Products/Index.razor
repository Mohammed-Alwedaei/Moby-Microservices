@page "/Products"

@inject IProductService ProductService
@inject IJSRuntime JsRuntime

<PageTitle>Our Products</PageTitle>

<section class="row align-items-center">
    <div class="col-lg-6 col-12">
        <h1>Products</h1>

        <p>This component demonstrates fetching data from the server.</p>
    </div>
    
    <div class="col-lg-6 col-12 text-end">
        <button class="btn btn-info">
            Create Product &nbsp; <i class="oi oi-plus"></i>
        </button>
    </div>
</section>

<section class="row">
    @if (!Products.Any())
    {
        <div class="spinner-border"></div>
    }
    else
    {
        @foreach (var product in Products)
        {
            <div class="col-lg-3">
                <ProductCard Product="product" />
            </div>
            
        }
    }
</section>

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "alert")]
    public string Alert { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "title")]
    public string Title { get; set; }

    private List<ProductDto> Products = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await ProductService.GetProductsAsync<ResponseDto>();

        if (response.Results is not null || response.IsSuccess is not false)
            Products = JsonConvert.DeserializeObject<List<ProductDto>>(Convert.ToString(response.Results));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            if (string.IsNullOrEmpty(Alert) && string.IsNullOrEmpty(Title))
                return;
            else
            {
                Title = Title.Replace("%", " ");
                await JsRuntime.InvokeVoidAsync("alert", Title, Alert);
            }
    }
}
